ContentRefresher
================

ContentRefresher will request the last updated time for the model at a given interval. The id and updated_at will be sent to the client in json format. If the the last time has changes the client side ask for new content. All request is done with xhr.

The plugin defines a changed method, that returns
	{:id => @model.id, :updated_at => @model.updated_at}
	
The client side will compare this with the their last updated_at.

Installation
============

./script/plugin install git://github.com/jnstq/content_refresher.git

This is will also copy the content_refresher.js to public/javascripts/content_refresher.js

Example
=======

In your controller include the content_refresher module and enable refreshing on one or more actions

Controller
----------

class PostsController < ApplicationController  
  include Equipe::ContentRefresher  
  # This will default check changed
  refresh :show, :every => 5.seconds
  # You can also dynamic set :pull_path => lambda { changed_post_path(@post) }, :refresh_path => lambda { post_path(@post) }
  # This will eval the block the in the instance of the controller
  # refresh :show, :every => 5.seconds, :pull_path => lambda { formatted_changed_post_path(@post, :js) }, :refresh_path => lambda { formatted_post_path(@post, :js) }
  
  
  # Turn off verify_authenticity_token and session to improve performance
  skip_before_filter :verify_authenticity_token, :only => [:changed, :show]
  session :off, :only => [:changed, :show]
  # This can be useful, to turn off layout on xhr-request 
  # layout proc{ |c| c.request.xhr? ? false : "list" }
  
  # This method is defined by including Equipe::ContentRefresher
  # If you want a different behavior please override
  # def changed
  #   @post = Post.find(params[:id], :select => 'id, updated_at')
  #   respond_to do |format|
  #     format.js { render :json => {:id => @post.id, :updated_at => @post.updated_at } }
  #   end
  # end

  def show
    @post = Post.find(params[:id])

    respond_to do |format|
      format.html
      format.js   # This is the action generate javascript to controll the update on the client side.
    end
  end
end

View
----

In posts/show.html.erb or in application.html.erb make sure you include the javascripts on the top of the page.
<%= javascript_include_tag :defaults,  'content_refresher' %>


Create file posts/show.js.rjs, and add

page.replace_html dom_id(@post), :partial => 'post'
page.visual_effect :highlight, dom_id(@post)

Routes
------

Remember to add changed route to each controller you are using the plugin.

map.resources :posts, :member => {:changed => :get}

Copyright (c) 2008 Jon Stenqvist (jon dot stenqvist at gmail)


